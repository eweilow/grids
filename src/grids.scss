/*
    grids
    Copyright (C) 2015  Erik Weilow

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/
@import "_breakpointsBuild.scss";

.row {
  float: left;

  &:after {
    content: "";
    display: table;
    clear: both;
  }
}
.row.primary, .primary-row {
  box-sizing: border-box;
}

.col {
  float: left;
  box-sizing: border-box;

  margin: 0;
}

@mixin col-name($prefix, $columns, $gutter) {
  .col {
    margin-top: $gutter;
    padding: 0 $gutter / 2;
  }
  $per-col: 100% / $columns;
  @for $i from 1 through $columns {
    .col.#{$prefix}#{$i} {
      width: $per-col * $i;
      &.center-#{$prefix}, &.center-all {
        margin-left: (100% - $per-col * $i) / 2;
      }
    }
  }
  @for $i from 1 through $columns {
    .col.offset-#{$prefix}#{$i} {
      margin-left: $per-col * $i;
      &.right {
        margin-left: 0;
        margin-right: $per-col * $i;
      }
    }
  }
}

@mixin row($columns, $gutter) {
  .row {
    margin-left: (-1 * $gutter / 2);
    margin-right: (-1 * $gutter / 2);
    padding: 0;
  }
  .row.primary, .primary-row {
    margin-left: 0;
    margin-right: 0;
    padding-left:  $gutter / 2 !important;
    padding-right: $gutter / 2 !important;
  }
}

@mixin hide($min, $max, $prefix) {
  @media only screen {
    @if $min <= 0 {
      @media (max-width: $max) {
        .hide-on-#{$prefix} { display: none !important; }
      }
      .hide-on-#{$prefix}-and-up { display: none !important; }
      .hide-on-#{$prefix}-and-down { display: none !important; }
      @media only screen and (min-width: $max + 1px) {
        .only-on-#{$prefix} { display: none !important; }
      }
    } @else if $max < 0 {
      @media (min-width: $min) {
        .hide-on-#{$prefix} { display: none !important; }
      }
      .hide-on-#{$prefix}-and-up { display: none !important; }
      .hide-on-#{$prefix}-and-down { display: none !important; }
      @media only screen and (max-width: $min - 1px) {
        .only-on-#{$prefix} { display: none !important; }
      }
    } @else {
      @media only screen and (min-width: $min) and (max-width: $max) {
        .hide-on-#{$prefix} { display: none !important; }
      }
      @media only screen and (max-width: $max) {
        .hide-on-#{$prefix}-and-down { display: none !important; }
      }
      @media only screen and (min-width: $min) {
        .hide-on-#{$prefix}-and-up { display: none !important; }
      }
      @media only screen and (max-width: $min - 1px), only screen and (min-width: $max + 1px) {
        .only-on-#{$prefix} { display: none !important; }
      }
    }
  }
}

@mixin floats($prefix) {
  .#{$prefix}left { float: left !important; }
  .#{$prefix}right { float: right !important; }
}

$directions: ('top', 'bottom', 'left', 'right');
$types: ("margin", "padding");
$sizes: (1,2,3,4);

@mixin helpers($prefix, $gutter, $prefixed) {
  @each $type in $types {
    @each $i in $sizes {
      $size: $i * $gutter;
      @if($prefixed) {
        .#{$prefix}-#{$type}-#{$i} { #{$type}: #{$size} !important; }
      } @else {
        .#{$type}-#{$i} { #{$type}: #{$size} !important; }
      }
    }
  }
  @each $type in $types {
    @each $i in $sizes {
      $size: $i * $gutter;
      @each $dir in $directions {
        @if($prefixed) {
          .#{$prefix}-#{$type}-#{$i}-#{$dir} { #{$type}-#{$dir}: #{$size} !important; }
        } @else {
          .#{$type}-#{$i}-#{$dir} { #{$type}-#{$dir}: #{$size} !important; }
        }
      }
    }
  }
  @if($prefixed) {
    @each $type in $types {
      @each $dir in $directions {
        .#{$prefix}-no-#{$type}-#{$dir} { #{$type}-#{$dir}: 0 !important; }
      }
    }
  }
  .with-gutter {
    padding: 0 $gutter / 2;
  }
}

$prevLandscape: 0 !default;
$prevPortrait: 0 !default;
@each $min, $max, $prefix, $columns, $gutter, $orientation in $breakpoints {
  $query: "screen and (min-width: #{$min})and (orientation: #{$orientation})";
  @media #{$query} {
    @if ($orientation == "landscape" and $prevLandscape < $gutter) {
      $prevLandscape: $gutter;
      @include helpers("", $prevLandscape, false);
    } @else if ($orientation == "portrait" and $prevPortrait < $gutter) {
      $prevPortrait: $gutter;
      @include helpers("", $prevPortrait, false);
    }
    @include helpers($prefix, $gutter, true);
    @include floats($prefix);
    @include row($columns, $gutter);
    @include col-name($prefix, $columns, $gutter);
  }
  @include hide($min, $max, $prefix);
}

@each $type in $types {
  @each $dir in $directions {
    .no-#{$type}-#{$dir} { #{$type}-#{$dir}: 0 !important; }
  }
  .no-#{$type} { #{$type}: 0 !important; }
}

.col.no-gutter {
  padding: 0;
}